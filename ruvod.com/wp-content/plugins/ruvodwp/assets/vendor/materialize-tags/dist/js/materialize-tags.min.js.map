/**
 * materialize-tags - A jQuery tags input plugin based on Materialize
 * @version v1.2.0
 * @link https://github.com/henrychavez/materialize-tags
 * @license MIT
 * @author Henry Ch√°vez <henry19.chavez@gmail.com>
 * @maintainer Jonathan Dekhtiar <contact@jonathandekhtiar.eu>
 */
{"version":3,"sources":["materialize-tags.js"],"names":["$","TagsMaterialize","element","options","this","itemsArray","$element","hide","objectItems","itemValue","placeholderText","hasAttribute","attr","inputSize","Math","max","length","$container","$input","appendTo","$label","parent","find","before","build","on","addClass","next","focus","label","parents","hasClass","parentContainer","tags","removeClass","val","makeOptionItemFunction","key","propertyName","item","makeOptionFunction","value","htmlEncode","htmlEncodeContainer","text","html","doGetCaretPosition","oField","iCaretPos","document","selection","oSel","createRange","moveStart","selectionStart","keyCombinationInList","keyDownEvent","lookupList","found","each","index","keyCombination","which","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","defaultOptions","tagClass","toString","itemText","itemTitle","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","onTagExists","$tag","fadeIn","trimValue","allowDuplicates","deleteTagsOnBackspace","deleteTagsOnDeleteKey","MoveTagOnLeftArrow","MoveTagOnRightArrow","autoselect","CapitalizeFirstLetterOnly","prototype","constructor","add","dontPushVal","self","trim","charAt","toUpperCase","slice","match","tagName","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","data","findInputWrapper","after","blur","prop","$existingTag","filter","remove","other","beforeItemRemoveEvent","inArray","splice","siblings","first","removeAll","pop","refresh","contents","nodeType","nodeValue","map","typeahead","extend","typeaheadjs","typeaheadConfig","typeaheadDatasets","isArray","proxy","obj","datum","valueKey","event","removeAttr","target","$inputWrapper","prev","$prevTag","$nextTag","textLength","ceil","maxLengthReached","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","fn","materialtags","arg1","arg2","arg3","results","retVal","defaults","Constructor","window","jQuery"],"mappings":"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","file":"materialize-tags.min.js","sourcesContent":["/**\n * materialize-tags - A jQuery tags input plugin based on Materialize\n * @version v1.2.0\n * @link https://github.com/henrychavez/materialize-tags\n * @license MIT\n * @author Henry Ch√°vez <henry19.chavez@gmail.com>\n * @maintainer Jonathan Dekhtiar <contact@jonathandekhtiar.eu>\n */\n(function ($)\r\n{\r\n    \"use strict\";\r\n\r\n    /**\r\n    * Default Configuration\r\n    *\r\n    * @type {{tagClass: tagClass, itemValue: itemValue, itemText: itemText, itemTitle: itemTitle, freeInput: boolean, addOnBlur: boolean, maxTags: undefined, maxChars: undefined, confirmKeys: number[], onTagExists: onTagExists, trimValue: boolean, allowDuplicates: boolean}}\r\n    */\r\n    var defaultOptions = {\r\n        tagClass                    : tagClass,\r\n        itemValue                   : itemValue,\r\n        itemText                    : itemText,\r\n        itemTitle                   : itemTitle,\r\n        freeInput                   : true,\r\n        addOnBlur                   : true,\r\n        maxTags                     : undefined,\r\n        maxChars                    : undefined,\r\n        confirmKeys                 : [9,13, 44, 188],\r\n        onTagExists                 : onTagExists,\r\n        trimValue                   : true,\r\n        allowDuplicates             : false,\r\n        deleteTagsOnBackspace       : true,\r\n        deleteTagsOnDeleteKey       : true,\r\n        MoveTagOnLeftArrow          : true,\r\n        MoveTagOnRightArrow         : true,\r\n        autoselect                  : false,\r\n        CapitalizeFirstLetterOnly   : false,\r\n    };\r\n\r\n\r\n    function tagClass(item)\r\n    {\r\n        return 'chip';\r\n    }\r\n\r\n    function itemValue(item)\r\n    {\r\n        return item ? item.toString() : item;\r\n    }\r\n\r\n    function itemText(item)\r\n    {\r\n        return this.itemValue(item);\r\n    }\r\n\r\n    function itemTitle(item)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    function onTagExists(item, $tag)\r\n    {\r\n        $tag.hide().fadeIn();\r\n    }\r\n\r\n    function selectFirstSuggestion(){\r\n        $('.tt-suggestion.tt-selectable').first().addClass('tt-cursor');\r\n    }\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * @param element\r\n    * @param options\r\n    * @constructor\r\n    */\r\n    function TagsMaterialize(element, options)\r\n    {\r\n        this.itemsArray = [];\r\n\r\n        this.$element = $(element);\r\n        this.$element.hide();\r\n\r\n        this.objectItems    = options && options.itemValue;\r\n        this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\r\n        this.inputSize      = Math.max(1, this.placeholderText.length);\r\n\r\n        this.$container = $('<div class=\"materialize-tags\"></div>');\r\n        this.$input    = $('<input type=\"text\" class=\"n-tag\"  placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\r\n        this.$label    = this.$element.parent().find('label');\r\n\r\n        this.$element.before(this.$container);\r\n        this.build(options);\r\n\r\n        this.$label.on('click', function ()\r\n        {\r\n            $(this).addClass('active');\r\n            $(this).addClass('infocus');\r\n            $(this).next('.materialize-tags').find('input.n-tag').focus();\r\n        });\r\n\r\n        this.$input.on('focus', function ()\r\n        {\r\n            var label = $(this).parents('.materialize-tags').parent().find('label');\r\n            $(this).parents('.materialize-tags').addClass('active');\r\n +            !label.hasClass('infocus') && label.addClass('infocus');\r\n\r\n            if (!label.hasClass('active'))\r\n            {\r\n                label.addClass('active');\r\n            }\r\n        }).on('focusout', function ()\r\n        {\r\n            var parentContainer = $(this).parents('.materialize-tags'),\r\n                tags            = parentContainer.find('span.chip');\r\n            parentContainer.removeClass('active');\r\n +          parentContainer.parent().find('label').removeClass('infocus');\r\n            // Verify if is empty and remove \"active\" class from label\r\n            if (tags.length == 0 && $(this).val().length == 0)\r\n            {\r\n                parentContainer.parent().find('label').removeClass('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    TagsMaterialize.prototype = {\r\n        constructor : TagsMaterialize,\r\n\r\n        /**\r\n        * Adds the given item as a new tag. Pass true to dontPushVal to prevent\r\n        * updating the elements val()\r\n        *\r\n        * @param item\r\n        * @param dontPushVal\r\n        * @param options\r\n        */\r\n        add : function (item, dontPushVal, options)\r\n        {\r\n            var self = this;\r\n\r\n            if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Ignore false values, except false\r\n            if (item !== false && !item)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Trim value\r\n            if (typeof item === \"string\" && self.options.trimValue)\r\n            {\r\n                item = $.trim(item);\r\n            }\r\n\r\n            // CapitalizeFirstLetter\r\n            if (typeof item === \"string\" && self.options.CapitalizeFirstLetterOnly)\r\n            {\r\n                item = item.charAt(0).toUpperCase() + item.slice(1);\r\n            }\r\n\r\n            // Throw an error when trying to add an object while the itemValue option was not set\r\n            if (typeof item === \"object\" && !self.objectItems)\r\n            {\r\n                throw(\"Can't add objects when itemValue option is not set\");\r\n            }\r\n\r\n            // Ignore strings only contain whitespace\r\n            if (item.toString().match(/^\\s*$/))\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT')\r\n            {\r\n                var items = item.split(',');\r\n                if (items.length > 1)\r\n                {\r\n                    for (var i = 0; i < items.length; i++)\r\n                    {\r\n                        this.add(items[i], true);\r\n                    }\r\n\r\n                    if (!dontPushVal)\r\n                    {\r\n                        self.pushVal();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n\r\n            var itemValue = self.options.itemValue(item),\r\n                itemText  = self.options.itemText(item),\r\n                tagClass  = self.options.tagClass(item),\r\n                itemTitle = self.options.itemTitle(item);\r\n\r\n            // Ignore empty tags\r\n            if (itemText == '' || itemText == undefined){\r\n                return;\r\n            }\r\n\r\n            // Ignore items all ready added\r\n            var existing = $.grep(self.itemsArray, function (item) { return self.options.itemValue(item) === itemValue; })[0];\r\n            if (existing && !self.options.allowDuplicates)\r\n            {\r\n                // Invoke onTagExists\r\n                if (self.options.onTagExists)\r\n                {\r\n                    var $existingTag = $(\".tag\", self.$container).filter(function () { return $(this).data(\"item\") === existing; });\r\n                    self.options.onTagExists(item, $existingTag);\r\n                }\r\n                return;\r\n            }\r\n\r\n            // if length greater than limit\r\n            if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // raise beforeItemAdd arg\r\n            var beforeItemAddEvent = $.Event('beforeItemAdd', {item : item, cancel : false, options : options});\r\n            self.$element.trigger(beforeItemAddEvent);\r\n            if (beforeItemAddEvent.cancel)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // register item in internal array and map\r\n            self.itemsArray.push(item);\r\n\r\n            // add a tag element\r\n            var $tag = $('<span class=\"' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<i class=\"material-icons\" data-role=\"remove\">close</i></span>');\r\n            $tag.data('item', item);\r\n            self.findInputWrapper().before($tag);\r\n            $tag.after(' ');\r\n\r\n            if (!dontPushVal)\r\n            {\r\n                self.pushVal();\r\n            }\r\n\r\n            // Add class when reached maxTags\r\n            if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\r\n            {\r\n                self.$container.addClass('materialize-tags-max');\r\n                self.$input.blur();\r\n                self.$input.prop('readOnly', true);\r\n            }\r\n\r\n            self.$element.trigger($.Event('itemAdded', {item : item, options : options}));\r\n        },\r\n\r\n        /**\r\n        * Removes the given item. Pass true to dontPushVal to prevent updating the\r\n        * elements val()\r\n        *\r\n        * @param item\r\n        * @param dontPushVal\r\n        * @param options\r\n        */\r\n        remove : function (item, dontPushVal, options)\r\n        {\r\n            var self = this;\r\n\r\n            if (self.objectItems)\r\n            {\r\n                if (typeof item === \"object\")\r\n                {\r\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == self.options.itemValue(item); });\r\n                }\r\n                else\r\n                {\r\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == item; });\r\n                }\r\n\r\n                item = item[item.length - 1];\r\n            }\r\n\r\n            if (item)\r\n            {\r\n                var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\r\n                    item    : item,\r\n                    cancel  : false,\r\n                    options : options\r\n                });\r\n                self.$element.trigger(beforeItemRemoveEvent);\r\n                if (beforeItemRemoveEvent.cancel)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                $('.chip', self.$container).filter(function () { return $(this).data('item') === item; }).remove();\r\n\r\n                if ($.inArray(item, self.itemsArray) !== -1)\r\n                {\r\n                    self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\r\n                }\r\n            }\r\n\r\n            if (!dontPushVal)\r\n            {\r\n                self.pushVal();\r\n            }\r\n\r\n            // Remove class when reached maxTags\r\n            if (self.options.maxTags > self.itemsArray.length)\r\n            {\r\n                self.$container.removeClass('materialize-tags-max');\r\n                self.$input.prop('readOnly', false);\r\n            }\r\n\r\n            // Remove active class when reached 0 tags\r\n            if (self.itemsArray.length == 0){\r\n                self.$input.siblings(\"label\").first().removeClass('active');\r\n            }\r\n\r\n            self.$input.blur();\r\n            self.$element.trigger($.Event('itemRemoved', {item : item, options : options}));\r\n        },\r\n\r\n        /**\r\n        * Removes all items\r\n        */\r\n        removeAll : function ()\r\n        {\r\n            var self = this;\r\n\r\n            $('.chip', self.$container).remove();\r\n\r\n            while (self.itemsArray.length > 0)\r\n            {\r\n                self.itemsArray.pop();\r\n            }\r\n\r\n            self.pushVal();\r\n            self.$container.removeClass('materialize-tags-max');\r\n            self.$input.siblings(\"label\").first().removeClass('active');\r\n            self.$input.prop('readOnly', false);\r\n            self.$input.blur();\r\n        },\r\n\r\n        /**\r\n        * Refreshes the tags so they match the text/value of their corresponding\r\n        * item.\r\n        */\r\n        refresh : function ()\r\n        {\r\n            var self = this;\r\n            $('.chip', self.$container).each(function ()\r\n            {\r\n                var $tag        = $(this),\r\n                    item        = $tag.data('item'),\r\n                    itemValue   = self.options.itemValue(item),\r\n                    itemText    = self.options.itemText(item),\r\n                    tagClass    = self.options.tagClass(item);\r\n\r\n                // Update tag's class and inner text\r\n                $tag.attr('class', null);\r\n                $tag.addClass('tag ' + htmlEncode(tagClass));\r\n                $tag.contents().filter(function ()\r\n                {\r\n                    return this.nodeType == 3;\r\n                })[0].nodeValue = htmlEncode(itemText);\r\n\r\n            });\r\n        },\r\n\r\n        /**\r\n        * Returns the items added as tags\r\n        */\r\n        items : function ()\r\n        {\r\n            return this.itemsArray;\r\n        },\r\n\r\n        /**\r\n        * Assembly value by retrieving the value of each item, and set it on the\r\n        * element.\r\n        */\r\n        pushVal : function ()\r\n        {\r\n            var self = this,\r\n                val  = $.map(self.items(), function (item)\r\n                {\r\n                    return self.options.itemValue(item).toString();\r\n                });\r\n\r\n            self.$element.val(val, true).trigger('change');\r\n            self.$input.typeahead('val', '');\r\n        },\r\n\r\n        /**\r\n        * Initializes the tags input behaviour on the element\r\n        *\r\n        * @param options\r\n        */\r\n        build : function (options)\r\n        {\r\n            var self = this;\r\n\r\n            self.options = $.extend({}, defaultOptions, options);\r\n            // When itemValue is set, freeInput should always be false\r\n\r\n            if (self.objectItems)\r\n            {\r\n                if (self.options.freeInput === true)\r\n                {\r\n                    self.options.freeInput = true;\r\n                }\r\n                else{\r\n                    self.options.freeInput = false\r\n                }\r\n            }\r\n\r\n            makeOptionItemFunction(self.options, 'itemValue');\r\n            makeOptionItemFunction(self.options, 'itemText');\r\n            makeOptionFunction(self.options, 'tagClass');\r\n\r\n            // Typeahead.js\r\n            if (self.options.typeaheadjs)\r\n            {\r\n                var typeaheadConfig   = null;\r\n                var typeaheadDatasets = {};\r\n\r\n                // Determine if main configurations were passed or simply a dataset\r\n                var typeaheadjs = self.options.typeaheadjs;\r\n                if ($.isArray(typeaheadjs))\r\n                {\r\n                    typeaheadConfig   = typeaheadjs[0];\r\n                    typeaheadDatasets = typeaheadjs[1];\r\n                }\r\n                else\r\n                {\r\n                    typeaheadDatasets = typeaheadjs;\r\n                }\r\n\r\n                self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum)\r\n                {\r\n                    if (typeaheadDatasets.valueKey)\r\n                    {\r\n                        self.add(datum[typeaheadDatasets.valueKey]);\r\n                    }\r\n                    else\r\n                    {\r\n                        self.add(datum);\r\n                    }\r\n                    self.$input.typeahead('val', '');\r\n                }, self));\r\n            }\r\n\r\n            self.$container.on('click', $.proxy(function (event)\r\n            {\r\n                if (!self.$element.attr('disabled'))\r\n                {\r\n                    self.$input.removeAttr('disabled');\r\n                }\r\n                self.$input.focus();\r\n            }, self));\r\n\r\n            if (self.options.addOnBlur && self.options.freeInput)\r\n            {\r\n                self.$input.on('focusout', $.proxy(function (event)\r\n                {\r\n                    self.add(self.$input.val());\r\n                    self.$input.val('');\r\n\r\n                }, self));\r\n            }\r\n\r\n            self.$container.on('keydown', 'input', $.proxy(function (event)\r\n            {\r\n                var $input        = $(event.target),\r\n                    $inputWrapper = self.findInputWrapper();\r\n\r\n                if (self.$element.attr('disabled'))\r\n                {\r\n                    self.$input.attr('disabled', 'disabled');\r\n                    return;\r\n                }\r\n\r\n                switch (event.which)\r\n                {\r\n                    // BACKSPACE\r\n                    case 8:\r\n                        if (self.options.deleteTagsOnBackspace && doGetCaretPosition($input[0]) === 0)\r\n                        {\r\n                            var prev = $inputWrapper.prev();\r\n                            if (prev)\r\n                            {\r\n                                self.remove(prev.data('item'));\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    // DELETE\r\n                    case 46:\r\n                        if (self.options.deleteTagsOnDeleteKey && doGetCaretPosition($input[0]) === 0)\r\n                        {\r\n                            var next = $inputWrapper.next();\r\n                            if (next)\r\n                            {\r\n                                self.remove(next.data('item'));\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    // LEFT ARROW\r\n                    case 37:\r\n                        // Try to move the input before the previous tag\r\n                        var $prevTag = $inputWrapper.prev();\r\n                        if (self.options.MoveTagOnLeftArrow && $input.val().length === 0 && $prevTag[0])\r\n                        {\r\n                            $prevTag.before($inputWrapper);\r\n                            $input.focus();\r\n                        }\r\n                        break;\r\n                    // RIGHT ARROW\r\n                    case 39:\r\n                        // Try to move the input after the next tag\r\n                        var $nextTag = $inputWrapper.next();\r\n                        if (self.options.MoveTagOnRightArrow && $input.val().length === 0 && $nextTag[0])\r\n                        {\r\n                            $nextTag.after($inputWrapper);\r\n                            $input.focus();\r\n                        }\r\n                        break;\r\n                    default:\r\n                    // ignore\r\n                }\r\n\r\n                // Reset internal input's size\r\n                var textLength = $input.val().length,\r\n                    wordSpace  = Math.ceil(textLength / 5),\r\n                    size       = textLength + wordSpace + 1;\r\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\r\n            }, self));\r\n\r\n            self.$container.on('keydown', 'input', $.proxy(function (event)\r\n            {\r\n                var $input = $(event.target);\r\n\r\n                if (self.$element.attr('disabled'))\r\n                {\r\n                    self.$input.attr('disabled', 'disabled');\r\n                    return;\r\n                }\r\n\r\n                var text            = $input.val(),\r\n                    maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\r\n                if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached))\r\n                {\r\n                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\r\n                    $input.val('');\r\n                    (self.$input.typeahead) && self.$input.typeahead(\"val\",\"\");\r\n                    event.preventDefault();\r\n                }\r\n\r\n                // Reset internal input's size\r\n                var textLength = $input.val().length,\r\n                    wordSpace  = Math.ceil(textLength / 5),\r\n                    size      = textLength + wordSpace + 1;\r\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\r\n            }, self));\r\n\r\n            // Remove icon clicked\r\n            self.$container.on('click', '[data-role=remove]', $.proxy(function (event)\r\n            {\r\n                if (self.$element.attr('disabled'))\r\n                {\r\n                    return;\r\n                }\r\n                self.remove($(event.target).closest('.chip').data('item'));\r\n            }, self));\r\n\r\n            // Only add existing value as tags when using strings as tags\r\n            if (self.options.itemValue === defaultOptions.itemValue)\r\n            {\r\n                if (self.$element[0].tagName === 'INPUT')\r\n                {\r\n                    self.add(self.$element.val());\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n        * Removes all materialtags behaviour and unregsiter all event handlers\r\n        */\r\n        destroy : function ()\r\n        {\r\n            var self = this;\r\n\r\n            // Unbind events\r\n            self.$container.off('keydown', 'input');\r\n            self.$container.off('click', '[role=remove]');\r\n\r\n            self.$container.remove();\r\n            self.$element.removeData('materialtags');\r\n            self.$element.show();\r\n        },\r\n\r\n        /**\r\n        * Sets focus on the materialtags\r\n        */\r\n        focus : function ()\r\n        {\r\n            this.$input.focus();\r\n        },\r\n\r\n        /**\r\n        * Returns the internal input element\r\n        */\r\n        input : function ()\r\n        {\r\n            return this.$input;\r\n        },\r\n\r\n        /**\r\n        * Returns the element which is wrapped around the internal input. This\r\n        * is normally the $container, but typeahead.js moves the $input element.\r\n        */\r\n        findInputWrapper : function ()\r\n        {\r\n            var elt      = this.$input[0],\r\n                container = this.$container[0];\r\n            while (elt && elt.parentNode !== container)\r\n            {\r\n                elt = elt.parentNode;\r\n            }\r\n\r\n            return $(elt);\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Register JQuery plugin\r\n    *\r\n    * @param arg1\r\n    * @param arg2\r\n    * @param arg3\r\n    * @returns {Array}\r\n    */\r\n    $.fn.materialtags = function (arg1, arg2, arg3)\r\n    {\r\n        var results = [];\r\n\r\n        this.each(function ()\r\n        {\r\n            var materialtags = $(this).data('materialtags');\r\n            // Initialize a new material tags input\r\n            if (!materialtags)\r\n            {\r\n                materialtags = new TagsMaterialize(this, arg1);\r\n                $(this).data('materialtags', materialtags);\r\n                results.push(materialtags);\r\n\r\n                // Init tags from $(this).val()\r\n                $(this).val($(this).val());\r\n            }\r\n            else if (!arg1 && !arg2)\r\n            {\r\n                // materialtags already exists\r\n                // no function, trying to init\r\n                results.push(materialtags);\r\n            }\r\n            else if (materialtags[arg1] !== undefined)\r\n            {\r\n                // Invoke function on existing tags input\r\n                if (materialtags[arg1].length === 3 && arg3 !== undefined)\r\n                {\r\n                    var retVal = materialtags[arg1](arg2, null, arg3);\r\n                }\r\n                else\r\n                {\r\n                    var retVal = materialtags[arg1](arg2);\r\n                }\r\n                if (retVal !== undefined)\r\n                {\r\n                    results.push(retVal);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (typeof arg1 == 'string')\r\n        {\r\n            // Return the results from the invoked function calls\r\n            return results.length > 1 ? results : results[0];\r\n        }\r\n        else\r\n        {\r\n            return results;\r\n        }\r\n    };\r\n\r\n    $.fn.materialtags.defaults = defaultOptions;\r\n    $.fn.materialtags.Constructor = TagsMaterialize;\r\n\r\n    /**\r\n    * Most options support both a string or number as well as a function as\r\n    * option value. This function makes sure that the option with the given\r\n    * key in the given options is wrapped in a function\r\n    *\r\n    * @param options\r\n    * @param key\r\n    */\r\n    function makeOptionItemFunction(options, key)\r\n    {\r\n        if (typeof options[key] !== 'function')\r\n        {\r\n            var propertyName = options[key];\r\n            options[key]    = function (item) { return item[propertyName]; };\r\n        }\r\n    }\r\n\r\n    function makeOptionFunction(options, key)\r\n    {\r\n        if (typeof options[key] !== 'function')\r\n        {\r\n            var value    = options[key];\r\n            options[key] = function () { return value; };\r\n        }\r\n    }\r\n\r\n    /**\r\n    * HtmlEncodes the given value\r\n    */\r\n    var htmlEncodeContainer = $('<div />');\r\n\r\n    function htmlEncode(value)\r\n    {\r\n        if (value)\r\n        {\r\n            return htmlEncodeContainer.text(value).html();\r\n        }\r\n        else\r\n        {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Returns the position of the caret in the given input field\r\n    * http://flightschool.acylt.com/devnotes/caret-position-woes/\r\n    *\r\n    * @param oField\r\n    * @returns {number}\r\n    */\r\n    function doGetCaretPosition(oField)\r\n    {\r\n        var iCaretPos = 0;\r\n        if (document.selection)\r\n        {\r\n            oField.focus();\r\n            var oSel  = document.selection.createRange();\r\n            oSel.moveStart('character', -oField.value.length);\r\n            iCaretPos = oSel.text.length;\r\n        }\r\n        else if (oField.selectionStart || oField.selectionStart == '0')\r\n        {\r\n            iCaretPos = oField.selectionStart;\r\n        }\r\n        return (iCaretPos);\r\n    }\r\n\r\n    /**\r\n    * Returns boolean indicates whether user has pressed an expected key combination.\r\n    * http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\r\n    * [13, {which: 188, shiftKey: true}]\r\n    *\r\n    * @param keyDownEvent\r\n    * @param lookupList\r\n    * @returns {boolean}\r\n    */\r\n    function keyCombinationInList(keyDownEvent, lookupList)\r\n    {\r\n        var found = false;\r\n        $.each(lookupList, function (index, keyCombination)\r\n        {\r\n            if (typeof (keyCombination) === 'number' && keyDownEvent.which === keyCombination)\r\n            {\r\n                found = true;\r\n                return false;\r\n            }\r\n\r\n            if (keyDownEvent.which === keyCombination.which)\r\n            {\r\n                var alt   = !keyCombination.hasOwnProperty('altKey') || keyDownEvent.altKey === keyCombination.altKey,\r\n                    shift = !keyCombination.hasOwnProperty('shiftKey') || keyDownEvent.shiftKey === keyCombination.shiftKey,\r\n                    ctrl  = !keyCombination.hasOwnProperty('ctrlKey') || keyDownEvent.ctrlKey === keyCombination.ctrlKey;\r\n                if (alt && shift && ctrl)\r\n                {\r\n                    found = true;\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return found;\r\n    }\r\n\r\n    /**\r\n    * Initialize materialtags behaviour on inputs which have\r\n    * data-role=materialtags\r\n    */\r\n    $(function ()\r\n    {\r\n        $(\"input[data-role=materialtags]\").materialtags();\r\n    });\r\n})(window.jQuery);\r\n"]}